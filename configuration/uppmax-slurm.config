/*
 * -------------------------------------------------
 * Nextflow config file for Sarek
 * -------------------------------------------------
 * Slurm configuration for UPPMAX clusters
 * -------------------------------------------------
 */

params {
  genome_base = params.genome == 'GRCh37' ? '/sw/data/uppnex/ToolBox/ReferenceAssemblies/hg38make/bundle/2.8/b37' : params.genome == 'GRCh38' ? '/sw/data/uppnex/ToolBox/hg38bundle' : 'References/smallGRCh37'
  runTime       = 48.h
  singleCPUMem  = 8.GB // Need to be accurate to have memory and cpus in sync.
}

process {
  clusterOptions = {"-A $params.project"}
  cpus = 16 // Full node is default
  executor = 'slurm'
  /* For Uppmax, the memory parameter needs to match the memory of
  the corresponding cpus. Default value here should be memory for a full node */
  memory = 128.GB
  scratch = true
  time = 48.h

  errorStrategy = {task.exitStatus == 143 ? 'retry' : 'terminate'}
  maxErrors = '-1'
  maxRetries = 3

  withName:BuildBWAindexes {
  }
  withName:BuildReferenceIndex {
  }
  withName:BuildSAMToolsIndex {
  }
  withName:BuildVCFIndex {
  }
  withName:ConcatVCF {
    cpus = 1
    memory = params.singleCPUMem
  }
  withName:CreateRecalibrationTable {
    cpus = 5
    memory = {5 * params.singleCPUMem}
    time = {params.runTime * task.attempt}
  }
  withName:GetVersionBamQC {
    cpus = 1
    memory = params.singleCPUMem
  }
  withName:GetVersionBWAsamtools {
    cpus = 1
    memory = params.singleCPUMem
  }
  withName:GetVersionFastQC {
    cpus = 1
    memory = params.singleCPUMem
  }
  withName:GetVersionGATK {
    cpus = 1
    memory = params.singleCPUMem
  }
  withName:MapReads {
    time = {params.runTime * task.attempt}
  }
  withName:MarkDuplicates {
    cpus = 5
    memory = {5 * (params.singleCPUMem as nextflow.util.MemoryUnit)}
  }
  withName:MergeBams {
    cpus = {5 * task.attempt}
    memory = {5 * params.singleCPUMem * task.attempt}
    time = {params.runTime * task.attempt}
  }
  withName:RealignerTargetCreator {
    time = {params.runTime * task.attempt}
  }
  withName:RecalibrateBam {
    cpus = {2 * task.attempt }
    memory = {2 * params.singleCPUMem * task.attempt}
    time = {params.runTime * task.attempt}
  }
  withName:RunAlleleCount {
    cpus = {2 * task.attempt}
    memory = {2 * params.singleCPUMem * task.attempt}
  }
  withName:RunAscat {
    cpus = {2 * task.attempt}
    memory = {2 * params.singleCPUMem * task.attempt}
  }
  withName:RunBamQC {
    cpus = 8
    memory = {8 * params.singleCPUMem}
  }
  withName:RunBcftoolsStats {
    cpus = 1
    memory = params.singleCPUMem
  }
  withName:RunConvertAlleleCounts {
    cpus = 2
    memory = {2 * params.singleCPUMem * task.attempt}
  }
  withName:RunFastQC {
    errorStrategy = { task.exitStatus == 143 ? 'retry' : 'ignore' }
  }
  withName:RunFreeBayes {
    cpus = {task.attempt}
    memory = {params.singleCPUMem * task.attempt}
    time = {params.runTime * task.attempt}
  }
  withName:RunHaplotypecaller {
    // Increase memory quadratically
    cpus = {task.attempt * task.attempt}
    memory = {params.singleCPUMem * task.attempt * task.attempt}
    time = {params.runTime * task.attempt}
  }
  withName:RunGenotypeGVCFs {
    cpus = 1
    memory = params.singleCPUMem
  }
  withName:RunManta {
  }
  withName:RunMultiQC {
    errorStrategy = { task.exitStatus == 143 ? 'retry' : 'ignore' }
  }
  withName:RunMutect2 {
    cpus = {task.attempt}
    memory = {params.singleCPUMem * task.attempt}
    time = {params.runTime * task.attempt}
  }
  withName:RunSamtoolsStats {
    cpus = 1
    memory = params.singleCPUMem
    time = {params.runTime * task.attempt}
  }
  withName:RunSingleManta {
  }
  withName:RunSingleStrelka {
    time = {params.runTime * task.attempt}
  }
  withName:RunSnpeff {
    errorStrategy = { task.exitStatus == 143 ? 'retry' : 'ignore' }
  }
  withName:RunStrelka {
    time = {params.runTime * task.attempt}
  }
  withName:RunVEP {
    cpus = 1
    memory = params.singleCPUMem
    errorStrategy = { task.exitStatus == 143 ? 'retry' : 'ignore' }
  }
}
