/*
vim: syntax=groovy
-*- mode: groovy;-*-
 * -------------------------------------------------
 * Nextflow config file for CAW project
 * -------------------------------------------------
 */

manifest {
  homePage = 'http://opensource.scilifelab.se/projects/caw/'
  description = 'Cancer Analysis Workflow'
}

params { // default value for params
  annotateTools = ''
  annotateVCF = ''
  callName = '' // For MultiQC reports
  contactMail = '' // For MultiQC reports
  genome = 'GRCh38'
  help = false
  noGVCF = false
  noReports = false
  project = ''
  sample = ''
  sampleDir = ''
  step = 'mapping'
  test = false
  tools = ''
  vcflist =''
  verbose = false
  version = false
}

env {
  NXF_OPTS="-Xms1g -Xmx4g"
}

profiles {
  // Runs the pipeline locally on a single 16-core node
  standard { // Default profile for UPPMAX clusters
    includeConfig 'configuration/uppmax-localhost.config'
    includeConfig 'configuration/uppmax-modules.config'
  }
  // Runs the pipeline using the job scheduler
  slurm { // slurm profile for UPPMAX clusters
    includeConfig 'configuration/uppmax-slurm.config'
    includeConfig 'configuration/uppmax-modules.config'
  }
  dockerTest { // For small testing testing with Docker
    includeConfig 'configuration/travis.config'
    includeConfig 'configuration/docker.config'
  }
  singularityTest { // For small testing with Singularity
    includeConfig 'configuration/travis.config'
    includeConfig 'configuration/singularity.config'
  }
  singularityLocal { // For using Singularity UPPMAX clusters
    includeConfig 'configuration/uppmax-localhost.config'
    includeConfig 'configuration/singularity-download.config'
  }
  singularitySlurm { // For using Singularity UPPMAX clusters
    includeConfig 'configuration/uppmax-slurm.config'
    includeConfig 'configuration/singularity-download.config'
  }
}

// Path to references files
includeConfig 'configuration/genomes.config'

process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline { // Turning on timeline tracking by default
  enabled = true
}

trace { // Turning on trace tracking by default
  enabled = true
  fields = 'process,task_id,hash,name,attempt,status,exit,realtime,%cpu,vmem,rss,submit,start,complete,duration,realtime,rchar,wchar'
}

// Return the minimun of time or memory requirement
def returnMin(obj, objMax) {
  if(obj.compareTo(objMax))
    return objMax
  else
    return obj
}
