/*
 * -------------------------------------------------
 * Nextflow config file for Sarek
 * -------------------------------------------------
 * Generalized resource configuration for clusters
 * -------------------------------------------------
 */

params {
  singleCPUMem  = 7.GB // for processes that are using more memory but a single CPU only. Use the 'core' queue for these
}

process {
  cpus = { check_max( 10, 'cpus' ) }
  memory = { check_max( 16.GB * task.attempt, 'memory' ) }
  time = { check_max( 8.h * task.attempt, 'time' ) }

  errorStrategy = {task.exitStatus == 143 ? 'retry' : 'terminate'}
  maxErrors = '-1'
  maxRetries = 3

  withName:MapReads {
    memory = { check_max( 60.GB * task.attempt, 'memory' ) }
    cpus = { check_max( 10, 'cpus' ) }
  } 
  withName:CreateRecalibrationTable {
    cpus = { check_max( 12, 'cpus' ) }
    memory = {params.singleCPUMem * 8 * task.attempt}
  }
  withName:MarkDuplicates {
		// Actually the -Xmx value should be kept lower
    cpus = { check_max( 8, 'cpus' ) }
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
  }
  withName:MergeBams {
    memory = {params.singleCPUMem * task.attempt}
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
  withName:RecalibrateBam {
    cpus = { check_max( 12, 'cpus' ) }
    memory = { check_max( 7.GB * 8 * task.attempt, 'memory' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
  withName:RunAlleleCount {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 14.GB * task.attempt, 'memory' ) }
  }
  withName:RunAscat {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 14.GB * task.attempt, 'memory' ) }
  }
  withName:RunBcftoolsStats {
    cpus = { check_max( 1, 'cpus' ) }
  }
  withName:RunConvertAlleleCounts {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 14.GB * task.attempt, 'memory' ) }
  }
  withName:RunFastQC {
    cpus = { check_max( 2, 'cpus' ) } // FastQC is only capable of running one thread per fastq file.
    errorStrategy = { task.exitStatus == 143 ? 'retry' : 'ignore' }
  }
  withName:RunFreeBayes {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
  }
  withName:RunHaplotypecaller {
    cpus = { check_max( 20, 'cpus' ) }
    // Increase memory quadratically
    memory = { check_max( 7.GB * 2 * task.attempt, 'memory' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
  withName:RunGenotypeGVCFs {
    cpus = { check_max( 20, 'cpus' ) }
    memory = { check_max( 7.GB * task.attempt, 'memory' ) }
  }
  withName:RunMultiQC {
    errorStrategy = { task.exitStatus == 143 ? 'retry' : 'ignore' }
  }
  withName:RunMutect2 {
    cpus = { check_max( 2, 'cpus' ) }
    memory = { check_max( 7.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
  withName:RunSamtoolsStats {
    cpus = { check_max( 2, 'cpus' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
  withName:RunSingleStrelka {
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
  withName:RunSnpeff {
    cpus = { check_max( 1, 'cpus' ) }
    errorStrategy = { task.exitStatus == 143 ? 'retry' : 'ignore' }
  }
  withName:RunStrelka {
    cpus = { check_max( 1, 'cpus' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
  withName:RunVEP {
    cpus = { check_max( 1, 'cpus' ) }
    memory = {check_max (32.GB * task.attempt, 'memory' ) }
    errorStrategy = { task.exitStatus == 143 ? 'retry' : 'ignore' }
  }
}